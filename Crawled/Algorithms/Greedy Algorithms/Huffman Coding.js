Following is a typical recursive implementation of Quick Sort that uses last element as pivot. The above implementation can be optimized in many ways1) The above implementation uses last index as pivot. This causes worst-case behavior on already sorted arrays, which is a commonly occurring case. The problem can be solved by choosing either a random index for the pivot, or choosing the middle index of the partition or choosing the median of the first, middle and last element of the partition for the pivot. (See this for details)2) To reduce the recursion depth, recur first for the smaller half of the array, and use a tail call to recurse into the other. 3) Insertion sort works better for small subarrays. Insertion sort  can be used for invocations on such small arrays (i.e. where the length is less than a threshold t determined experimentally). For example, this library implementation of qsort uses insertion sort below size 7. Despite above optimizations, the function remains recursive and uses function call stack to store intermediate values of l and h. The function call stack stores other bookkeeping information together with parameters.  Also, function calls involve overheads like storing activation record of the caller function and then resuming execution.  The above function can be easily converted to iterative version with the help of an auxiliary stack.  Following is an iterative implementation of the above recursive code.Output:
1 2 2 3 3 3 4 5
The above mentioned optimizations for recursive quick sort can also be applied to iterative version.1) Partition process is same in both recursive and iterative. The same techniques to choose optimal pivot can also be applied to iterative version.2) To reduce the stack size, first push the indexes of smaller half.3) Use insertion sort when the size reduces below a experimentally calculated threshold.References:
http://en.wikipedia.org/wiki/QuicksortThis article is compiled by Aashish Barnwal and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.