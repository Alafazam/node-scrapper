Given an array of integers where each element represents the max number of steps that can be made forward from that element. Write a function to return the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then cannot move through that element.Example:First element is 1, so can only go to 3. Second element is 3, so can make at most 3 steps eg to 5 or 8 or 9.Method 1 (Naive Recursive Approach)
A naive approach is to start from the first element and recursively call for all the elements reachable from first element. The minimum number of jumps to reach end from first can be calculated using minimum number of jumps needed to reach end from the elements reachable from first.minJumps(start, end) = Min ( minJumps(k, end) ) for all k reachable from startIf we trace the execution of this method, we can see that there will be overlapping subproblems. For example, minJumps(3, 9) will be called two times as arr[3] is reachable from arr[1] and arr[2]. So this problem has both properties (optimal substructure and overlapping subproblems) of Dynamic Programming.  
Method 2 (Dynamic Programming) 
In this method, we build a jumps[] array from left to right such that jumps[i] indicates the minimum number of jumps needed to reach arr[i] from arr[0].  Finally, we return jumps[n-1].Output:
Minimum number of jumps to reach end is 3
Thanks to paras for suggesting this method.Time Complexity: O(n^2) 
Method 3 (Dynamic Programming)
In this method, we build jumps[] array from right to left such that jumps[i] indicates the minimum number of jumps needed to reach arr[n-1] from arr[i].  Finally, we return arr[0].Time Complexity: O(n^2) in worst case.Thanks to Ashish for suggesting this solution.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Tags: Dynamic Programming