We need not to do anything if a number is positive. We want to change only negative numbers. Since  negative numbers are stored in 2â€™s complement form, to get the absolute value of a negative number we have to toggle bits of the number and add 1 to the result.For example -2 in a 8 bit system is stored as follows  1 1 1 1 1 1 1 0 where leftmost bit is the sign bit.  To get the absolute value of a negative number, we have to toggle all bits and add 1 to the toggled number  i.e, 0 0 0 0 0 0 0 1 + 1 will give the absolute value of  1 1 1 1 1 1 1 0.  Also remember, we need to do these operations only if the number is negative (sign bit is set).Method 1
1) Set the mask as right shift of integer by 31 (assuming integers are stored using 32 bits). 2) For negative numbers, above step sets mask as 1 1 1 1 1 1 1 1 and 0 0 0 0 0 0 0 0 for positive numbers. Add the mask to the given number.3) XOR of mask +n and mask gives the absolute value.       Implementation:
Method 2:
1) Set the mask as right shift of integer by 31 (assuming integers are stored using 32 bits). 2) XOR the mask with number3) Subtract mask from result of step 2 and return the result.Implementation:On machines where branching is expensive, the above expression can be faster than the obvious approach, r = (v < 0) ? -(unsigned)v : v, even though the number of operations is the same.Please see this for more details about the above two methods.Please write comments if you find any of the above explanations/algorithms incorrect, or a better ways to solve the same problem.References:
http://graphics.stanford.edu/~seander/bithacks.html#IntegerAbsTags: Bit Magic