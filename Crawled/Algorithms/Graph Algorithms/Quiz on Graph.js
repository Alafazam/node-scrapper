Given a directed graph and two vertices ‘u’ and ‘v’ in it, count all possible walks from ‘u’ to ‘v’ with exactly k  edges on the walk.  The graph is given as adjacency matrix representation where  value of graph[i][j] as 1 indicates that there is an edge from vertex i to vertex j and a value 0 indicates no edge from i to j.For example consider the following graph.  Let source ‘u’ be vertex 0, destination ‘v’ be 3  and k be 2.  The output should be 2 as there are two walk from 0 to 3 with exactly 2 edges. The walks are {0, 2, 3} and {0, 1, 3}We strongly recommend to minimize the browser and try this yourself first.A simple solution is to start from u, go to all adjacent vertices and recur for adjacent vertices with k as k-1, source as adjacent vertex and destination as v.  Following is C++ implementation of this simple solution. Output:
2
The worst case time complexity of the above function is O(Vk) where V is the number of vertices in the given graph.  We can simply analyze the time complexity by drawing recursion tree. The worst occurs for a complete graph. In worst case, every internal node of recursion tree would have exactly n children.
We can optimize the above solution using Dynamic Programming.  The idea is to build a 3D table where first dimension is source, second dimension is destination, third dimension is number of edges from source to destination, and the value is count of walks. Like other Dynamic Programming problems, we fill the 3D table in bottom up manner.Output:
2
Time complexity of the above DP based solution is O(V3K) which is much better than the naive solution.We can also use Divide and Conquer to solve the above problem in O(V3Logk) time.  The count of walks of length k from u to v is the [u][v]’th entry in (graph[V][V])k. We can calculate power of by doing O(Logk) multiplication by using the divide and conquer technique to calculate power.  A multiplication between two matrices of size V x V takes O(V3) time.  Therefore overall time complexity of this method is O(V3Logk).Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Tags: Dynamic Programming