Given a sorted dictionary (array of words) of an alien language, find order of characters in the language.Examples:We strongly recommend to minimize the browser and try this yourself first. The idea is to create a graph of characters and then find topological sorting of the created graph.  Following are the detailed steps.1) Create a graph g with number of vertices equal to the size of alphabet in the given alien language. For example, if the alphabet size is 5, then there can be 5 characters in words.  Initially there are no edges in graph.2) Do following for every pair of adjacent words in given sorted array.
…..a) Let the current pair of words be word1 and word2. One by one compare characters of both words and find the first mismatching characters.
…..b) Create an edge in g from mismatching character of word1 to that of word2.3) Print topological sorting of the above created graph.Following is C++ implementation of the above algorithm.Output:
c a b
Time Complexity: The first step to create a graph takes O(n + alhpa) time where n is number of given words and alpha is number of characters in given alphabet.  The second step is also topological sorting. Note that there would be alpha  vertices and at-most (n-1) edges in the graph. The time complexity of topological sorting is O(V+E) which is O(n  + aplha) here.  So overall time complexity is O(n  + aplha) + O(n  + aplha) which is O(n  + aplha).Exercise:
The above code doesn’t work when the input is not valid. For example {“aba”, “bba”, “aaa”} is not valid, because from first two words, we can deduce ‘a’ should appear before ‘b’, but from last two words, we can deduce ‘b’ should appear before ‘a’ which is not possible. Extend the above program to handle invalid inputs and generate the output as “Not valid”.This article is contributed by Piyush Gupta. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.