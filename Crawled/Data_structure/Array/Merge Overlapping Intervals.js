Given an unsorted array of positive integers. Find the number of triangles that can be formed with three different array elements as three sides of triangles. For a triangle to be possible from 3 values, the sum of any two values (or sides) must be greater than the third value (or third side).
For example, if the input array is {4, 6, 3, 7}, the output should be 3.  There are three triangles possible {3, 4, 6}, {4, 6, 7} and {3, 6, 7}.  Note that {3, 4, 7} is not a possible triangle.
As another example, consider the array {10, 21, 22, 100, 101, 200, 300}.  There can be 6 possible triangles: {10, 21, 22}, {21, 100, 101}, {22, 100, 101}, {10, 100, 101}, {100, 101, 200} and {101, 200, 300}Method 1 (Brute force)
The brute force method is to run three loops and keep track of the number of triangles possible so far.  The three loops select three different values from array, the innermost loop checks for the triangle property ( the sum of any two sides must be greater than the value of third side).Time Complexity: O(N^3) where N is the size of input array.Method 2 (Tricky and Efficient)
Let a, b and c be three sides. The below condition must hold for a triangle (Sum of two sides is greater than the third side)
i)   a + b > c
ii)  b + c > a
iii) a + c > bFollowing are steps to count triangle.1. Sort the array in non-decreasing order. 2. Initialize two pointers ‘i’ and ‘j’ to first and second elements respectively, and initialize count of triangles as 0.3. Fix ‘i’ and ‘j’ and find the rightmost index ‘k’ (or largest ‘arr[k]’) such that ‘arr[i] + arr[j] > arr[k]’. The number of triangles that can be formed with ‘arr[i]’ and ‘arr[j]’ as two sides is ‘k – j’.  Add ‘k – j’ to count of triangles. Let us consider ‘arr[i]’ as ‘a’, ‘arr[j]’ as b and all elements between ‘arr[j+1]’ and ‘arr[k]’ as ‘c’.  The above mentioned conditions (ii) and (iii) are satisfied because ‘arr[i] < arr[j] < arr[k]'.  And we check for condition (i) when we pick 'k'4. Increment ‘j’ to fix the second element again. Note that in step 3, we can use the previous value of ‘k’. The reason is simple, if we know that the value of ‘arr[i] + arr[j-1]’ is greater than ‘arr[k]’, then we can say ‘arr[i] + arr[j]’ will also be greater than ‘arr[k]’, because the array is sorted in increasing order.5. If ‘j’ has reached end, then increment ‘i’. Initialize ‘j’ as ‘i + 1′, ‘k’ as ‘i+2′ and repeat the steps 3 and 4.Following is implementation of the above approach.Output:
Total number of triangles possible is 6
Time Complexity: O(n^2). The time complexity looks more because of 3 nested loops.  If we take a closer look at the algorithm, we observe that k is initialized only once in the outermost loop.  The innermost loop executes at most O(n) time for every iteration of outer most loop, because k starts from i+2 and goes upto n for all values of j. Therefore, the time complexity is O(n^2).Source: http://stackoverflow.com/questions/8110538/total-number-of-possible-triangles-from-n-numbersPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above.