Given a boolean 2D array, where each row is sorted. Find the row with the maximum number of 1s.A simple method is to do a row wise traversal of the matrix, count the number of 1s in each row and compare the count with max. Finally, return the index of row with maximum 1s. The time complexity of this method is O(m*n) where m is number of rows and n is number of columns in matrix.We can do better. Since each row is sorted, we can use Binary Search to count of 1s in each row. We find the index of first instance of 1 in each row. The count of 1s will be equal to total number of columns minus the index of first 1.See the following code for implementation of the above approach.Output:
Index of row with maximum 1s is 2
Time Complexity: O(mLogn) where m is number of rows and n is number of columns in matrix.The above solution can be optimized further.  Instead of doing binary search in every row, we first check whether the row has more 1s than max so far. If the row has more 1s, then only count 1s in the row. Also, to count 1s in a row, we don’t do binary search in complete row, we do search in before the index of last max.  Following is an optimized version of the above solution.The worst case time complexity of the above optimized version is also O(mLogn), the will solution work better on average. Thanks to Naveen Kumar Singh for suggesting the above solution. Sources: this and thisThe worst case of the above solution occurs for a matrix like following.
 0 0 0 … 0 1
 0 0 0 ..0 1 1
 0 … 0 1 1 1
 ….0 1 1 1 1Following method works in O(m+n) time complexity in worst case. Step1: Get the index of first (or leftmost) 1 in the first row.Step2: Do following for every row after the first row
…IF the element on left of previous leftmost 1 is 0, ignore this row.
…ELSE Move left until a 0 is found. Update the leftmost index to this index and max_row_index to be the current row.The time complexity is O(m+n) because we can possibly go as far left as we came ahead in the first step.Following is C++ implementation of this method.Thanks to Tylor, Ankan and Palash for their inputs.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.