Given a Binary Tree, write a function that returns the size of the largest subtree which is also a Binary Search Tree (BST). If the complete Binary Tree is BST, then return the size of whole tree.Examples:Method 1 (Simple but inefficient)
Start from root and do an inorder traversal of the tree.  For each node N, check whether the subtree rooted with N is BST or not.  If BST, then return size of the subtree rooted with N.  Else, recur down the left and right subtrees and return the maximum of values returned by left and right subtrees.Time Complexity:  The worst case time complexity of this method will be O(n^2). Consider a skewed tree for worst case analysis.
Method 2 (Tricky and Efficient)
In method 1, we traverse the tree in top down manner and do BST test for every node.  If we traverse the tree in bottom up manner, then we can pass information about subtrees to the parent. The passed information can be used by the parent to do BST test (for parent node) only in constant time (or O(1) time).  A left subtree need to tell the parent whether it is BST or not and also need to pass maximum value in it. So that we can compare the maximum value with the parentâ€™s data to check the BST property.  Similarly, the right subtree need to pass the minimum value up the tree.   The subtrees need to pass the following information up the tree for the finding the largest BST.
1) Whether the subtree itself is BST or not (In the following code, is_bst_ref is used for this purpose)
2) If the subtree is left subtree of its parent, then maximum value in it.  And if it is right subtree then minimum value in it.
3) Size of this subtree if this subtree is BST (In the following code, return value of largestBSTtil() is used for this purpose)max_ref is used for passing the maximum value up the tree and min_ptr is used for passing minimum value up the tree.Time Complexity: O(n) where n is the number of nodes in the given Binary Tree.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.