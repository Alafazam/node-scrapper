Given two Binary Search Trees(BST), print the elements of both BSTs in sorted form. The expected time complexity is O(m+n) where m is the number of nodes in first tree and n is the number of nodes in second tree. Maximum allowed auxiliary space is O(height of the first tree + height of the second tree). Examples:Source: Google interview questionA similar question has been discussed earlier. Let us first discuss already discussed methods of the previous post which was for Balanced BSTs.  The method 1 can be applied here also, but the time complexity will be O(n^2) in worst case.  The method 2 can also be applied here, but the extra space required will be O(n) which violates the constraint given in this question.  Method 3 can be applied here but the step 3 of method 3 canâ€™t be done in O(n) for an unbalanced BST.Thanks to Kumar for suggesting the following solution.The idea is to use iterative inorder traversal. We use two auxiliary stacks for two BSTs. Since we need to print the elements in sorted form, whenever we get a smaller element from any of the trees, we print it. If the element is greater, then we push it back to stack for the next iteration.Time Complexity: O(m+n)
Auxiliary Space: O(height of the first tree + height of the second tree)Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.