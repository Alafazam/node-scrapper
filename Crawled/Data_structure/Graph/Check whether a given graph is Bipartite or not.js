Given two Linked Lists, create union and intersection lists that contain union and intersection of the elements present in the given lists. Order of elments in output lists doesn’t matter.Example:Method 1 (Simple)
Following are simple algorithms to get union and intersection lists respectively.Intersection (list1, list2)
Initialize result list as NULL. Traverse list1 and look for its each element in list2, if the element is present in list2, then add the element to result.Union (list1, list2):
Initialize result list as NULL. Traverse list1 and add all of its elements to the result.
Traverse list2. If an element of list2 is already present in result then do not insert it to result, otherwise insert.This method assumes that there are no duplicates in the given lists.Thanks to Shekhu for suggesting this method. Following is C implementation of this method. Output:Time Complexity: O(mn) for both union and intersection operations. Here m is the number of elements in first list and n is the number of elements in second list.Method 2 (Use Merge Sort)
In this method, algorithms for Union and Intersection are very similar. First we sort the given lists, then we traverse the sorted lists to get union and intersection.
Following are the steps to be followed to get union and intersection lists.1) Sort the first Linked List using merge sort. This step takes O(mLogm) time. Refer this post for details of this step.
2) Sort the second Linked List using merge sort. This step takes O(nLogn) time. Refer this post for details of this step.
3) Linearly scan both sorted lists to get the union and intersection. This step takes O(m + n) time. This step can be implemented using the same algorithm as sorted arrays algorithm discussed here.Time complexity of this method is O(mLogm + nLogn) which is better than method 1’s time complexity.Method 3 (Use Hashing)
Union (list1, list2)
Initialize the result list as NULL and create an empty hash table.  Traverse both lists one by one, for each element being visited, look the element in hash table. If the element is not present, then insert the element to result list.  If the element is present, then ignore it.Intersection (list1, list2)
Initialize the result list as NULL and create an empty hash table.  Traverse list1. For each element being visited in list1, insert the element in hash table.  Traverse list2, for each element being visited in list2, look the element in hash table. If the element is present, then insert the element to result list.  If the element is not present, then ignore it.Both of the above methods assume that there are no duplicates.Time complexity of this method depends on the hashing technique used and the distribution of elements in input lists.  In practical, this approach may turn out to be better than above 2 methods.Source: http://geeksforgeeks.org/forum/topic/union-intersection-of-unsorted-listsPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above.