
					Ugly numbers are numbers whose only prime factors are 2, 3 or 5. The sequence
1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, …
shows the first 11 ugly numbers. By convention, 1 is included.
Write a program to find and print the 150’th ugly number.


METHOD  1 (Simple)
Thanks to Nedylko Draganov for suggesting this solution.  
Algorithm:
Loop for all positive integers until ugly number count is smaller than n, if an integer is ugly than increment ugly number count.
To check if a number is ugly, divide the number by greatest divisible powers of 2, 3 and 5, if the number becomes 1 then it is an ugly number otherwise not. 
For example, let us see how to check for 300 is ugly or not. Greatest divisible power of 2 is 4, after dividing 300 by 4 we get 75.  Greatest divisible power of 3 is 3,  after dividing 75 by 3 we get 25.  Greatest divisible power of 5 is 25,  after dividing 25 by 25 we get 1.  Since we get 1 finally, 300 is ugly number.
Implementation:

# include<stdio.h>
# include<stdlib.h>

/*This function divides a by greatest divisible 
  power of b*/
int maxDivide(int a, int b)
{
  while (a%b == 0)
   a = a/b; 
  return a;
}	

/* Function to check if a number is ugly or not */
int isUgly(int no)
{
  no = maxDivide(no, 2);
  no = maxDivide(no, 3);
  no = maxDivide(no, 5);
  
  return (no == 1)? 1 : 0;
}    

/* Function to get the nth ugly number*/
int getNthUglyNo(int n)
{
  int i = 1; 
  int count = 1;   /* ugly number count */ 

  /*Check for all integers untill ugly count 
    becomes n*/ 
  while (n > count)
  {
    i++;      
    if (isUgly(i))
      count++; 
  }
  return i;
}

/* Driver program to test above functions */
int main()
{
    unsigned no = getNthUglyNo(150);
    printf("150th ugly no. is %d ",  no);
    getchar();
    return 0;
}

This method is not time efficient as it checks for all integers until ugly number count becomes n, but space complexity of this method is O(1)  

METHOD  2 (Use Dynamic Programming)
Here is a time efficient solution with O(n) extra space.  The ugly-number sequence is 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, …
        because every number can only be divided by 2, 3, 5, one way to look at the sequence is to split the sequence to three groups as below:
        (1) 1×2, 2×2, 3×2, 4×2, 5×2, …
        (2) 1×3, 2×3, 3×3, 4×3, 5×3, …
        (3) 1×5, 2×5, 3×5, 4×5, 5×5, …
        We can find that every subsequence is the ugly-sequence itself (1, 2, 3, 4, 5, …) multiply 2, 3, 5. Then we use similar merge method as merge sort, to get every ugly number from the three subsequence. Every step we choose the smallest one, and move one step after.
Algorithm:

1 Declare an array for ugly numbers:  ugly[150]
2 Initialize first ugly no:  ugly[0] = 1
3 Initialize three array index variables i2, i3, i5 to point to 
   1st element of the ugly array: 
        i2 = i3 = i5 =0; 
4 Initialize 3 choices for the next ugly no:
         next_mulitple_of_2 = ugly[i2]*2;
         next_mulitple_of_3 = ugly[i3]*3
         next_mulitple_of_5 = ugly[i5]*5;
5 Now go in a loop to fill all ugly numbers till 150:
For (i = 1; i < 150; i++ ) 
{
    /* These small steps are not optimized for good 
      readability. Will optimize them in C program */
    next_ugly_no  = Min(next_mulitple_of_2,
                                  next_mulitple_of_3,
                                  next_mulitple_of_5); 
    if  (next_ugly_no  == next_mulitple_of_2) 
    {             
        i2 = i2 + 1;        
        next_mulitple_of_2 = ugly[i2]*2;
    } 
    if  (next_ugly_no  == next_mulitple_of_3) 
    {             
        i3 = i3 + 1;        
        next_mulitple_of_3 = ugly[i3]*3;
     }            
     if  (next_ugly_no  == next_mulitple_of_5)
     {    
        i5 = i5 + 1;        
        next_mulitple_of_5 = ugly[i5]*5;
     } 
     ugly[i] =  next_ugly_no       
}/* end of for loop */ 
6.return next_ugly_no

Example:
Let us see how it works 

initialize
   ugly[] =  | 1 |
   i2 =  i3 = i5 = 0;

First iteration
   ugly[1] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
            = Min(2, 3, 5)
            = 2
   ugly[] =  | 1 | 2 |
   i2 = 1,  i3 = i5 = 0  (i2 got incremented ) 

Second iteration
    ugly[2] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
             = Min(4, 3, 5)
             = 3
    ugly[] =  | 1 | 2 | 3 |
    i2 = 1,  i3 =  1, i5 = 0  (i3 got incremented ) 

Third iteration
    ugly[3] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
             = Min(4, 6, 5)
             = 4
    ugly[] =  | 1 | 2 | 3 |  4 |
    i2 = 2,  i3 =  1, i5 = 0  (i2 got incremented )

Fourth iteration
    ugly[4] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
              = Min(6, 6, 5)
              = 5
    ugly[] =  | 1 | 2 | 3 |  4 | 5 |
    i2 = 2,  i3 =  1, i5 = 1  (i5 got incremented )

Fifth iteration
    ugly[4] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
              = Min(6, 6, 10)
              = 6
    ugly[] =  | 1 | 2 | 3 |  4 | 5 | 6 |
    i2 = 3,  i3 =  2, i5 = 1  (i2 and i3 got incremented )

Will continue same way till I < 150

Program:

# include<stdio.h>
# include<stdlib.h>
# define bool int

/* Function to find minimum of 3 numbers */
unsigned min(unsigned , unsigned , unsigned );

/* Function to get the nth ugly number*/
unsigned getNthUglyNo(unsigned n)
{
    unsigned *ugly =
             (unsigned *)(malloc (sizeof(unsigned)*n));
    unsigned i2 = 0, i3 = 0, i5 = 0;
    unsigned i;
    unsigned next_multiple_of_2 = 2;
    unsigned next_multiple_of_3 = 3;
    unsigned next_multiple_of_5 = 5;
    unsigned next_ugly_no = 1;
    *(ugly+0) = 1;

    for(i=1; i<n; i++)
    {
       next_ugly_no = min(next_multiple_of_2,
                           next_multiple_of_3,
                           next_multiple_of_5);
       *(ugly+i) = next_ugly_no;                    
       if(next_ugly_no == next_multiple_of_2)
       {
           i2 = i2+1;       
           next_multiple_of_2 = *(ugly+i2)*2;
       }
       if(next_ugly_no == next_multiple_of_3)
       {
           i3 = i3+1;
           next_multiple_of_3 = *(ugly+i3)*3;
       }
       if(next_ugly_no == next_multiple_of_5)
       {
           i5 = i5+1;
           next_multiple_of_5 = *(ugly+i5)*5;
       }
    } /*End of for loop (i=1; i<n; i++) */
    return next_ugly_no;
}

/* Function to find minimum of 3 numbers */
unsigned min(unsigned a, unsigned b, unsigned c)
{
    if(a <= b)
    {
      if(a <= c)
        return a;
      else
        return c;
    }
    if(b <= c)
      return b;
    else
      return c;
}

/* Driver program to test above functions */
int main()
{
    unsigned no = getNthUglyNo(150);
    printf("%dth ugly no. is %d ", 150, no);
    getchar();
    return 0;
}

Algorithmic Paradigm:   Dynamic Programming
Time Complexity:         O(n)
Storage Complexity:    O(n)
Please write comments if you find any bug in the above program or other ways to solve the same problem. 
		
 
 




(adsbygoogle = window.adsbygoogle || []).push({});




 
 
 
Related Topics:Job Sequencing Problem | Set 1 (Greedy Algorithm)Multiply two polynomialsAlgorithm Practice Question for Beginners | Set 1Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < nBinomial HeapPrint all increasing sequences of length k from first n natural numbersFind n’th number in a number system with only 3 and 4Minimum Cost Polygon Triangulation
Tags: Dynamic Programming 


Tweet



  (function() {
    var po = document.createElement('s-item cat-item-187"><a href="http://geeksquiz.com/category/quizzes/web-technologies/" >Web technologies</a> (1)
</li>
</ul>
</li>
		</ul>
</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js">



(adsbygoogle = window.adsbygoogle || []).push({});

		
Recent Discussions
			
		
			



(adsbygoogle = window.adsbygoogle || []).push({});





								
				
						
        
					
 Writing code in comment? Please use ideone.com and share the link here.
				

            


            
                    
        
            
                Srikant Aggarwal
            
        
        
            I am using the method but getting nos. repeated …

        

    
    
        
            
                Prateek
            
        
        
            Better approach to improve the storage complexity from 0[N] by using the  Bit array where each bit as 1 represent as Ugly number and 0 represent non ugly number.
public class UglyNumbers {
	byte[] uglyNumbersList = new byte[10000000];
	public int getUglyNumber(int kth) {
		int uglyNumberCount =0;
		int currentNum=1;
		while(true)
		{
			if(currentNum==1 || currentNum==2 || currentNum==3 || currentNum==5 || isUglyNumber(currentNum))
			{
				uglyNumbersList[currentNum]=1;
				uglyNumberCount++;
				if(kth==uglyNumberCount)
				{
					return currentNum;
				}
			}
			currentNum++;
		}
	}
	private boolean isUglyNumber(int value){
		if(uglyNumbersList[value]==1)
		{
			return true;
		}
		if(value%2==0)
		{
			return isUglyNumber(value/2);
		}
		if(value%3==0)
		{
			return isUglyNumber(value/3);
		}
		if(value%5==0)
		{
			return isUglyNumber(value/5);
		}
		return false;
	}
}

        

    
    
        
            
                Abhinav Aggarwal
            
        
        
            int main()
{
    int n=150;
    priority_queue<int, vector, greater> pq;
    pq.push(1);
    int cnt = 1;
    int prev = 0;
    while (cnt < 150)
    {
        int val = pq.top();
        pq.pop();
        if (val == prev)
            continue;
//        cout << cnt << " " << val << "n";
        prev = val;
        pq.push(val * 2);
        pq.push(val * 3);
        pq.push(val * 5);
        if (cnt == 150)
            break;
        cnt++;
    }
    cout <> n;
    return 0;
}
We can use priority queue also for this.

        

    
    
        
            
                Bill
            
        
        
            These are not called ugly numbers by mathematicians.  They are called “5-smooth numbers”, “regular numbers” or “Hamming numbers”.  Where did you get the name “ugly” from??

        

    
    
        
            
                shashi jey
            
        
        
            yeah u r right,,but they are also called ugly numbers

        

    


    
        
            
                jakab922
            
        
        
            EDIT2: Ah not I misread the description. My ugly numbers are the ones which don’t have 2, 3 or 5 as a prime factor.
Can be solved in O(log n) time and O(1) space complexity with the following sieve for the beautiful numbers + binary search(first_good func can be replaced with something smarter I just didn’t bother)
def beautiful(x):
    return x/2 + x/3 + x/5 – x/6 – x/10 – x/15 + x/30
def first_good(x):
    while x % 2 == 0 or x % 3 == 0 or x % 5 == 0:
        x -= 1
    return x
def smart_ugly_number(x):
    y = 1
    while y – beautiful(y)  1 and mid – beautiful(mid) != x:
        if mid – beautiful(mid) > x:
            high = mid
        else:
            low = mid
        mid = (low + high) / 2
    if mid – beautiful(mid) == x:
        return first_good(mid)
    elif low – beautiful(low):
        return first_good(low)
    else:
        return first_good(high)
If instead 2, 3 and 5 one has m coprime numbers the sieve methods blows up to O(2^m) steps but if m << n the O(2^m log n) time bound can still be good. There might be a smart method which calculates the alternating sum in the subset lattice faster than 2^m but I just don't see it how. Space complexity for this is still O(m) since walking on the lattice can be easily done by dynamic programming.
EDIT: Identation removed from the snippet. It's python though

        

    
    
        
            
                sh
            
        
        
            Why is 14 not an ugly number?

        

    
    
        
            
                jv
            
        
        
            7 is the prime factor of 14.
where as we can only have 2,3,5

        

    
    
        
            
                abc
            
        
        
            you are right but the code will print 14 according to 2 code
Here is the code in jAVA and its output:
void printN_UglyNUmbers(int n){
		if(n>=1){
    System.out.println(1);
int i_2=1;
int i_3=1;
int i_5=1;
int value;
int mul_2;
int mul_3;
int mul_5;
			for(int i=2;i<=n;i++){
				mul_2=i_2*2;
mul_3=i_3*3;
mul_5=i_5*5;
value= min(mul_2, mul_3, mul_5);
    System.out.println(mul_2+" "+ mul_3+" "+mul_5);
System.out.println(value);
if(value==mul_2)i_2++;
				if(value==mul_3)i_3++;
				if(value==mul_5)i_5++;
			}
		}
Output for 15 ugly numbers:
1
2 3 5
2
4 3 5
3
4 6 5
4
6 6 5
5
6 6 10
6
8 9 10
8
10 9 10
9
10 12 10
10
12 12 15
12
14 15 15
14

        

    
    
        
            
                abc
            
        
        
            Please ignore previous cooment  It was my bad I didn’t use array as DP

        

    






    
        
            
                Unique
            
        
        
             
// By mistake I have given the code of max function istead of min.. Correct is  as follows.. :- 
int min(int a,int b,int c)
{
    return ((a<b)?(a<c?a:c):(b<c?b:c));
}
 

        

    
    
        
            
                

(adsbygoogle = window.adsbygoogle || []).push({});






(adsbygoogle = window.adsbygoogle || []).push({});

		
	
			   
		

		
		
		    
			  Valid XHTML Strict 1.0
		    
		    
		    
			  Powered by WordPress  & MooTools | MiniMoo 1.3.4
			  
		   						                            
		   
		   
        
		        
        // <![CDATA[
        var disqus_shortname = 'geeksquiz';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('data-dsqidentifier'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        
        


	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://d18khu5s3lkxd9.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheetser-22206">Unique</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22206" class="dsq-comment-body">
            <div id="dsq-comment-message-22206" class="dsq-comment-message"><pre> <code language="C">
// What's d problem wd this code.. This is nt giving d correct output...Plz help !!!!
#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int min(int a,int b,int c)
{
    return ((a&gt;b)?(a&gt;c?a:c):(b&gt;c?b:c));
}
int getUglyNum(int num)
{
    int *ugly=(int *)malloc(sizeof(int)*num);
    int i2=0,i3=0,i5=0;
    int i;
    *(ugly+0)=1;
    int next_ugly=1;
    for(i=1;i&lt;num;i++)
    {
                    next_ugly=min(ugly[i2]*2,ugly[i3]*3,ugly[i5]*5);
                    *(ugly+i)=next_ugly;
                    if(next_ugly==2)
                                    i2++;
                     if(next_ugly==3)
                                     i3++;
                     if(next_ugly==5)
                                     i5++; 
                     }
                     return next_ugly;
}
int main()
{
    printf(&quot;150th Ugly Num is %d&quot;, getUglyNum(150));
    getch();
    return 0;
}

</code> </pre>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-22213">
        <div id="dsq-comment-header-22213" class="dsq-comment-header">
            <cite id="dsq-cite-22213">
                <span id="dsq-author-user-22213">Unique</span>
            </cite>
        </div>
        <div id="dsq-comment-body-22213" class="dsq-comment-body">
            <div id="dsq-comment-message-22213" class="dsq-comment-message"><pre> <code language="C">
//Take this min instead above min..
int min(int a,int b,int c)
{
    return ((a&lt;b)?(a&lt;c?a:c):(b&lt;c?b:c));
}
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt depth-2" id="dsq-comment-31093">
        <div id="dsq-comment-header-31093" class="dsq-comment-header">
            <cite id="dsq-cite-31093">
                <span id="dsq-author-user-31093">nirmal</span>
            </cite>
        </div>
        <div id="dsq-comment-body-31093" class="dsq-comment-body">
            <div id="dsq-comment-message-31093" class="dsq-comment-message"><p>@unique .. /*if(next_ugly==2)<br />
                                    i2++;<br />
                     if(next_ugly==3)<br />
                                     i3++;<br />
                     if(next_ugly==5)<br />
                                     i5++;<br />
                     }*/<br />
should be changed in order to get d correct output. .. i think we need to compare it for the multiples of 2 or 3 or 5.. not for 2 or 3 or 5..</p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment byuser comment-author-mani-deepak even thread-even depth-1" id="dsq-comment-21012">
        <div id="dsq-comment-header-21012" class="dsq-comment-header">
            <cite id="dsq-cite-21012">
                <span id="dsq-author-user-21012">mani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-21012" class="dsq-comment-body">
            <div id="dsq-comment-message-21012" class="dsq-comment-message"><p>does the following recursion works?<br />
ugly[i]=min{<br />
             ugly[i-1]*2,3,5<br />
             ugly[i-2]*2,3,5<br />
             ugly[i-3]*2,3,5<br />
          }</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20819">
        <div id="dsq-comment-header-20819" class="dsq-comment-header">
            <cite id="dsq-cite-20819">
                <span id="dsq-author-user-20819">gopi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-20819" class="dsq-comment-body">
            <div id="dsq-comment-message-20819" class="dsq-comment-message"><pre> <code language="C">
/* #include &lt;stdio.h&gt;



int Ugly(int );





int main()
{
	int n;
	printf(&quot;Enter the number\n&quot;);
	scanf(&quot;%d&quot;,&amp;n);
	Ugly(n);
}

int Ugly(int n)
{
	int m;
	int p,k;
	p=1;
	m=2;
	k=1;
	while(p&gt;0)
	{
		if(n==1)
		return (1);
		else
		if((m%2==0)||(m%3==0)||(m%5==0))
		{
			k=k+1;
			if(k==n)
		{	
		printf(&quot;THE %d number element is %d &quot;,n,m);
		p=0;
		}else
		m=m+1;
		}else
		m=m+1;
	}
}
		) */
</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-18609">
        <div id="dsq-comment-header-18609" class="dsq-comment-header">
            <cite id="dsq-cite-18609">
                <span id="dsq-author-user-18609">bhargav</span>
            </cite>
        </div>
        <div id="dsq-comment-body-18609" class="dsq-comment-body">
            <div id="dsq-comment-message-18609" class="dsq-comment-message"><pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
#include &lt;stdio.h&gt;
main() {
	int a[151],n=151,j;
	a[150]=ugly(150,a);
	for(j=0;j&lt;n;j++) {
        printf(&quot;%d\n&quot;,a[j] );
    }
	getch();
}
int ugly(int n,int a[]) {
	if(n&lt;0) return -1;
	if(n==0) return 1;
	a[n-1]= ugly(n-1,a);
	int k=a[n-1];
	if((k+1)%2==0||(k+1)%5==0||(k+1)%3==0) return k+1;
	if((k+2)%2==0||(k+2)%5==0||(k+2)%3==0) return k+2;
	if((k+3)%2==0||(k+3)%5==0||(k+3)%3==0) return k+3;
	if((k+5)%2==0||(k+5)%5==0||(k+5)%3==0) return k+4;
}


</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17822">
        <div id="dsq-comment-header-17822" class="dsq-comment-header">
            <cite id="dsq-cite-17822">
                <span id="dsq-author-user-17822">Mani</span>
            </cite>
        </div>
        <div id="dsq-comment-body-17822" class="dsq-comment-body">
            <div id="dsq-comment-message-17822" class="dsq-comment-message"><p>Method to check if number is Ugly number or not.</p>
<p>public static int uglyNo(int n){<br />
	if(n==1){<br />
		return 0;<br />
	}<br />
	if(n%2==0 || n%3 ==0 || n%5 ==0){<br />
		n=(n%2==0)?n/2:(n%3==0)?n/3:n/5;<br />
		return uglyNo(n);<br />
	}<br />
	return n;<br />
}</p>
<p>In main method<br />
public static void main(String[] args) {<br />
		// TODO Auto-generated method stub<br />
		if(uglyNo(13) == 0){<br />
			System.out.println(&#8220;Ugly number &#8220;);<br />
		}<br />
		else<br />
			System.out.println(&#8220;Not ugly number&#8221;);<br />
	}</p>
</div>
        </div>

    </li><!-- #comment-## -->
</li><!-- #comment-## -->
    <li class="comment even thread-even depth-1" id="dsq-comment-16214">
        <div id="dsq-comment-header-16214" class="dsq-comment-header">
            <cite id="dsq-cite-16214">
                <span id="dsq-author-user-16214">Pavi</span>
            </cite>
        </div>
        <div id="dsq-comment-body-16214" class="dsq-comment-body">
            <div id="dsq-comment-message-16214" class="dsq-comment-message"><p>My perspective of logic behind maintaining i2, i3 and i5 and reasoning behind it:</p>
<pre> <code language="C">
i2, i3 and i5 mark the minimum index in the array: ugly[] which are the candidates for the next ugly number 
after being multiplied by the corresponnding factor (i2 for 2, i3 for 3 and i5 for 5).
Therefore, initially i2 = i3 = i5 = 0 because the next candidate for ugly number (i.e, ugly[1])
 will be the min of (ugly[0]*2, ugly[0]*3, ugly[0]*5).

 Now, once the min is found to be 2, algo increments i2 by 1 to suggest that the candidate for next ugly number which
must be multiplied by 2 must be ugly[1] , because ugly[0] has already been considered for multiplication by 2.
 At this point i3 and i5 still point to zero coz ugly[0]*3 and ugly[0]*5 are still in race for the next ugly number.
</code> </pre>
<p>Hope it will clarify the logic a bit for others (and for me as well when I return back to this question after a long gap <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> )</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-15044">
        <div id="dsq-comment-header-15044" class="dsq-comment-header">
            <cite id="dsq-cite-15044">
                <span id="dsq-author-user-15044">Jagat</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15044" class="dsq-comment-body">
            <div id="dsq-comment-message-15044" class="dsq-comment-message"><p>Intuition:<br />
Each number needs to be multiplied by 2, 3, 5. But we don&#8217;t know which one is smaller: The smaller number multiplied by 5 or the largest number multiplied by 2? You&#8217;ll have no idea unless you actually try it out, which is exactly what you&#8217;re doing.</p>
<p>However, for each of 2, 3 and 5 you advance to the next trial only if you&#8217;re sure that there is no smaller ugly number that can be formed by multiplying the other two with the existing ugly number.</p>
<p>I find geeksforgeeks quite helpful as a catalog of questions. However, they do an extremely poor job in providing the intuition as to how they arrived at the solution.<br />
One bad effect of not having the logical path to the solution is that the website users will tend to memorise the solutions, which will cause more harm than benefit in the long run, besides forgetting the solution itself shortly.</p>
</div>
        </div>

    <ul class="children">
    <li class="comment byuser comment-author-coderace even depth-2" id="dsq-comment-15127">
        <div id="dsq-comment-header-15127" class="dsq-comment-header">
            <cite id="dsq-cite-15127">
                <span id="dsq-author-user-15127">coderAce</span>
            </cite>
        </div>
        <div id="dsq-comment-body-15127" class="dsq-comment-body">
            <div id="dsq-comment-message-15127" class="dsq-comment-message"><p>Beautiful! Your comment about the intuition actually made me realise how this falls under the DP category. </p>
<p>Although I don&#8217;t quite agree with GeeksForGeeks not providing intuition part though. </p>
<p>But in this case once you provided the intuition I could actually analyse and come up with the DP solution on my own. Lot of thanks <img src="http://d2o58evtke57tz.cloudfront.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14715">
        <div id="dsq-comment-header-14715" class="dsq-comment-header">
            <cite id="dsq-cite-14715">
                <span id="dsq-author-user-14715">db</span>
            </cite>
        </div>
        <div id="dsq-comment-body-14715" class="dsq-comment-body">
            <div id="dsq-comment-message-14715" class="dsq-comment-message"><p>In Algorithm (not Program) section of method 2</p>
<p>ugly[i] =  next_ugly_no </p>
<p>should go before the three if statements. The program is correct.</p>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment byuser comment-author-skoppala even thread-odd thread-alt depth-1" id="dsq-comment-7157">
        <div id="dsq-comment-header-7157" class="dsq-comment-header">
            <cite id="dsq-cite-7157">
                <span id="dsq-author-user-7157">skoppala</span>
            </cite>
        </div>
        <div id="dsq-comment-body-7157" class="dsq-comment-body">
            <div id="dsq-comment-message-7157" class="dsq-comment-message"><p>Here&#8217;s my attempt to print the first 150 Ugly Numbers using DP. I wonder though if the recurrence relation<br />
t(n) = MIN_{j=1 to n-1} [t(n-j)*2, t(n-j)*3, t(n-j)*5)] and > t(n-1)</p>
<p>can be improved.</p>
<pre> <code language="C">
/* Paste your code here (You may delete these lines if not writing code) */
// ugly numbers

# include &lt;stdio.h&gt;

int ugly (int *arr, int n){
    int j, lim, min, a1, a2, a3;
    lim = arr[n-1];
    min = -1;
    for (j = 0; j &lt; n; j++){
        a1 = arr[j]*2;
        a2 = arr[j]*3;
        a3 = arr[j]*5;        
        if (min == -1)
        {
                if (a1 &gt; lim)
                   min = a1;
                else if (a2 &gt; lim)
                     min = a2;
                else if (a3 &gt; lim)
                     min = a3;
        }
        else 
        {        
             if ((a1 &gt; lim) &amp;&amp; (a1 &lt; min))
                min = a1;
             if ((a2 &gt; lim) &amp;&amp; (a2 &lt; min))                  
                min = a2;
             if ((a3 &gt; lim) &amp;&amp; (a3 &lt; min))
                min = a1;
        }
    }
    if (min == -1)
       return -1;
    arr[n] = min;
    return 0;
}

int main(){
    int arr[150], i;
    arr[0] = 1;
    printf(&quot;\n ugly[0] = 1&quot;);
    for (i = 1; i &lt; 150; i++){
     //printf(&quot;\n return = %d&quot;,ugly(arr, i));
     if (ugly(arr,i) == 0)
        printf(&quot;\n ugly[%d] = %d&quot;, i, arr[i]);
    }    
    getchar();
    return 0;
}

</code> </pre>
</div>
        </div>

    </li><!-- #comment-## -->
    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6345">
        <div id="dsq-comment-header-6345" class="dsq-comment-header">
            <cite id="dsq-cite-6345">
                <span id="dsq-author-user-6345">pappu</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6345" class="dsq-comment-body">
            <div id="dsq-comment-message-6345" class="dsq-comment-message"><p>We can even implement using a heap. But it is O(nlogn).</p>
<p>#include&lt;iostream&gt;<br />
#include&lt;queue&gt;</p>
<p>using namespace std;</p>
<p>int getUglyNumber(int n)<br />
{<br />
        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; h;<br />
        int a[3], temp;<br />
        a[0] = 2;<br />
        a[1] = 3;<br />
        a[2] = 5;</p>
<p>        h.push(1);<br />
        for(int i = 1; i &lt; n; i++)<br />
        {<br />
                temp = h.top();<br />
                h.pop();<br />
                for(int j = 0; j &lt; 3; j++)<br />
                {<br />
                        h.push(temp*a[j]);<br />
                }<br />
        }</p>
<p>        return h.top();<br />
}</p>
<p>int main(void)<br />
{<br />
        cout &lt;&lt; getUglyNumber(150) &lt;&lt; endl;<br />
}</p>
</div>
        </div>

    <ul class="children">
    <li class="comment even depth-2" id="dsq-comment-6625">
        <div id="dsq-comment-header-6625" class="dsq-comment-header">
            <cite id="dsq-cite-6625">
                <span id="dsq-author-user-6625">Naveen</span>
            </cite>
        </div>
        <div id="dsq-comment-body-6625" class="dsq-comment-body">
            <div id="dsq-comment-message-6625" class="dsq-comment-message"><p>This gives wrong answers. For example, number 6 is added twice and so is fetched twice. </p>
<p>Naveen C N<br />
<a href="mailto:naveentiptur@gmail.com">naveentiptur@gmail.com</a></p>
</div>
        </div>

    </li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5657">
        <div id="dsq-comment-header-5657" class="dsq-comment-header">
            <cite id="dsq-cite-5657">
                <span id="dsq-author-user-5657">levis</span>
            </cite>
        </div>
        <div id="dsq-comment-body-5657" class="dsq-comment-body">
            <div id="dsq-comment-message-5657" class="dsq-comment-message"><p>recursive way for the first method &#8230;.</p>
<p>isUgly(int n)<br />
{<br />
printf(&#8220;before recursion %d\n&#8221;,n);<br />
if(n==1)<br />
return 1;<br />
if(n%2==0)<br />
return isUgly(n/2);<br />
else if(n%3==0)<br />
return " );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://d18khu5s3lkxd9.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

				  
		 



// Code for google analytics
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-37433965-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

       

	