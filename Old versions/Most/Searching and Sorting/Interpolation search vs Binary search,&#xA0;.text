
					Interpolation search works better than Binary Search for a sorted and uniformly distributed array. 
On average the interpolation search makes about log(log(n)) comparisons (if the elements are uniformly distributed), where n is the number of elements to be searched. In the worst case (for instance where the numerical values of the keys increase exponentially) it can make up to O(n) comparisons.
Sources:
http://en.wikipedia.org/wiki/Interpolation_search
		
 
 




(adsbygoogle = window.adsbygoogle || []).push({});




 
 
 
Related Topics:K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)K’th Smallest/Largest Element in Unsorted Array | Set 1Time complexity of insertion sort when there are O(n) inversions?How to check if two given sets are disjoint?Minimum Number of Platforms Required for a Railway/Bus StationFind the closest pair from two sorted arraysPrint all elements in sorted order from row and column wise sorted matrixLength of the largest subarray with contiguous elements | Set 1
 





       	
                      
    		    
         		
                               Home
                                Latest Questions
                               Articles
				C/C++ Programs
Contribute


	Books
		 	              
		 	  	   
			
				
				Subscribe				
			     
				
			      
		 
			
		
		

	

	

			

					
		
							
			
		
		
		
		

 
  
        
      
   
   
  
    
  Sorting
  
      
  
  Please wait while the activity loads. If this activity does not load, try refreshing your browser. Also, this page requires javascript. Please visit using a browser with javascript enabled.  
  If loading fails, click here to try again  
  
    
  

  
  
          Question 1What is recurrence for worst case of QuickSort and what is the time complexity in Worst case?ARecurrence is T(n) = T(n-2) + O(n) and time complexity is O(n^2)BRecurrence is T(n) = T(n-1) + O(n) and time complexity is O(n^2)CRecurrence is T(n) = 2T(n/2) + O(n) and time complexity is O(nLogn)DRecurrence is T(n) = T(n/10) + T(9n/10) + O(n) and time complexity is O(nLogn)Discuss itQuestion 1 Explanation:  The worst case of QuickSort occurs when the picked pivot is always one of the corner elements in sorted array.  In worst case, QuickSort recursively calls one subproblem with size 0 and other subproblem with size (n-1).  So recurrence is

T(n) = T(n-1) + T(0) + O(n)

The above expression can be rewritten as 

T(n) = T(n-1) + O(n)

1
Question 2Suppose we have a O(n) time algorithm that finds median of an unsorted array.  

Now consider a QuickSort implementation where we first find median using the above algorithm, then use median as pivot.  What will be the worst case time complexity of this modified QuickSort.AO(n^2 Logn)





						  
			 					
			
								
				
						
        
					
 Writing code in comment? Please use ideone.com and share the link here.
				

            


            
                    
        
            
                salilag
            
        
        
            check this http://www.queryhome.com/39879/what-difference-between-interpolation-search-binary-search

        

    
    
        
            
                Priyanshu
            
        
        
            a short useful note on interpolation search.
http://data.linkedin.com/blog/2010/06/beating-binary-search

        

    
    
        
            
                Priyanshu
            
        
        
            Happy Coding 

        

    


    
        
            
                abhishek08aug
            
        
        
            Intelligent 
 
/* Paste your code here (You may delete these lines if not writing code) */
 

        

    
    
        
            
                coder
            
        
        
            Can you please explain how is the complexity O(log log n) ….
Also, please explain these lines of the code gievn at the wikipedia page :
if (sortedArray[low] == toFind)
   return low;
why do we need to check this condition after coming out of the while loop ??

        

    
    
        
            
                Poorna Durga Yeddu
            
        
        
            What is uniformly distributed array?

        

    
    
        
            
                GeeksforGeeks
            
        
        
            http://en.wikipedia.org/wiki/Uniform_distribution_(discrete)

        

    
    
        
            
                Poorna Durga Yeddu
            
        
        
            So, that is the probability of occurrence of every key is same.

        

    




    
        
            
                Avinash
            
        
        
            //interpolation search
#include <stdio.h>
#include <iostream>
using namespace std;
#define SIZE 10
bool InterpolationSearch(int array[SIZE], int low, int high, int toFind,int size){
	int mid;
	while(array[low]<=toFind && array[high]>=toFind){
		mid= low + ((toFind-array[low])*(high-low))/(array[high]-array[low]);
		if(array[mid]==toFind){
			return true;
		}
		else if(array[mid]>toFind){
			high=mid-1;
		}
		else{
			low=mid+1;
		}
	}
	if(array[mid]==toFind){
		return true;
	}
	else
	{
		return false;
	}
}
int main(){
	int array[]={1,2,3,4,5,6,7,8,9,10};
	cout<<" "<<(InterpolationSearch(array,0,9,8,9)?"Found":"Not found");
	cout<<" "<<(InterpolationSearch(array,0,9,2,9)?"Found":"Not found");
	cout<<" "<<(InterpolationSearch(array,0,9,5,9)?"Found":"Not found");
	cout<<" "<<(InterpolationSearch(array,0,9,18,9)?"Found":"Not found");
}

        

    
            


        

    


var disqus_url = 'http://www.geeksforgeeks.org/g-fact-84/';
var disqus_identifier = '12281 http://geeksforgeeks.org/?p=12281';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'geeksforgeeks';
var disqus_title = "Interpolation search vs Binary search";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();


			
	
					
			
			

		 	


	
 


				
  (function() {
    var cx = '009682134359037907028:tj6eafkv_be';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();




  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
    
		
			
(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=138031159685820";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));


		
			



(adsbygoogle = window.adsbygoogle || []).push({});

		
			Interview Experiences
Advanced Data Structures
Dynamic Programming
Greedy Algorithms
Backtracking
Pattern Searching
Divide & Conquer
Mathematical Algorithms
Recursion
Geometric Algorithms

		
			



(adsbygoogle = window.adsbygoogle || []).push({});

		
Popular Posts
			
  All permutations of a given string 
 Memory Layout of C Programs 
 Understanding “extern” keyword in C 
Median of two sorted arrays 
 Tree traversal without recursion and without stack! 
 Structure Member Alignment, Padding and Data Packing 
 Intersection point of two Linked Lists 
 Lowest Common Ancestor in a BST. 
 Check if a binary tree is BST or not 
 Sorted Linked List to Balanced BST

		
			Follow @GeeksforGeeks
!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");         



Subscribe


		
Recent Comments
			
		
			



(adsbygoogle = window.adsbygoogle || []).push({});






(adsbygoogle = window.adsbygoogle || []).push({});






(adsbygoogle = window.adsbygoogle || []).push({});

		

					  
		

		
		
		    
                        @geeksforgeeks, Some rights reserved          Contact Us!

		    
		    
		    
			  Powered by WordPress  & MooTools, customized by geeksforgeeks team 
			  
		   						                            
		   
		   
        
		        
        // <![CDATA[
        var disqus_shortname = 'geeksforgeeks';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('rel'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        
        
				  
		 
         


  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-12148232-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();


	